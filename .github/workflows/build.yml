name: DeployTest

on:
  push:

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=master) 
        echo "::set-output name=version::$VERSION"
        echo $VERSION

  buildProjects:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Build the package
      run: |
        dotnet build AllSamples.sln

  buildMock:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildProjects
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        cd Samples/HtcMock
        docker build -t dockerhubaneo/armonik_worker_htcmock:$VERSION -f GridWorker/src/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_htcmock:$VERSION

  buildMockV3:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildProjects
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        cd Samples/HtcMockV3
        docker build -t dockerhubaneo/armonik_worker_htcmock_v3:$VERSION -f GridWorker/src/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_htcmock_v3:$VERSION

  testInfraWorker:
    needs:
      - buildProjects
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@monitoring

      - name: Run GridServerLike
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Samples/GridServerLike/
         dotnet publish --self-contained -r linux-x64 DataSynapseLike.sln

         sudo mkdir -p /data
         sudo chown -R $USER:$USER /data

         cp packages/ArmoniK.Samples.GridServer.Client-v1.0.0.zip /data

         cd ArmoniK.Samples.GridServer.Client/
         dotnet bin/net5.0/linux-x64/ArmoniK.Samples.GridServer.Client.dll

      - name: Run SymphonyLike
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Samples/SymphonyLike/
         dotnet publish --self-contained -r linux-x64 SymphonyLike.sln

         cp packages/ArmoniK.Samples.SymphonyPackage-v1.0.0.zip /data

         cd ArmoniK.Samples.SymphonyClient/
         dotnet bin/Debug/net5.0/linux-x64/ArmoniK.Samples.SymphonyClient.dll

  testInfraMock:
    needs:
      - versionning
      - buildMock
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@monitoring
        name: Deploy ArmoniK Infra with Mock Image
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_htcmock
          worker-tag: ${{ needs.versionning.outputs.version }}

      - name: Run Mock
        run: |
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export ReIP=$(kubectl get svc redis -n armonik-storage -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export RePort=$(kubectl get svc redis -n armonik-storage -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort
          export Redis__EndpointUrl=$ReIP:$RePort
          export Redis__SslHost="127.0.0.1"
          export Redis__Timeout=3000
          
          export Redis__CaCertPath=${{ steps.deploy-infra.outputs.credentials-ca-crt }}
          export Redis__ClientPfxPath=${{ steps.deploy-infra.outputs.credentials-certificate-pfx }}
          
          cd Samples/HtcMock/Client/src
          dotnet build "ArmoniK.Samples.HtcMock.Client.csproj" -c Release
          dotnet bin/Release/net5.0/ArmoniK.Samples.HtcMock.Client.dll

  testInfraMockV3:
    needs:
      - versionning
      - buildMockV3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@monitoring
        name: Deploy ArmoniK Infra with Mock Image
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_htcmock_v3
          worker-tag: ${{ needs.versionning.outputs.version }}

      - name: Run Mock
        run: |
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export ReIP=$(kubectl get svc redis -n armonik-storage -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export RePort=$(kubectl get svc redis -n armonik-storage -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort
          export Redis__EndpointUrl=$ReIP:$RePort
          export Redis__SslHost="127.0.0.1"
          export Redis__Timeout=3000
          
          export Redis__CaCertPath=${{ steps.deploy-infra.outputs.credentials-ca-crt }}
          export Redis__ClientPfxPath=${{ steps.deploy-infra.outputs.credentials-certificate-pfx }}
          
          cd Samples/HtcMockV3/Client/src
          dotnet build "ArmoniK.Samples.HtcMock.Client.csproj" -c Release
          dotnet bin/Release/net5.0/ArmoniK.Samples.HtcMock.Client.dll
