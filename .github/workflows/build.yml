name: DeployTest

on:
  push:

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=master)
        echo "::set-output name=version::$VERSION"
        echo $VERSION

  buildProjects:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Build the package
      run: |
        dotnet build AllSamples.sln

  buildMockV3:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildProjects
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        cd Samples/HtcMockV3
        docker build -t dockerhubaneo/armonik_worker_htcmock_v3:$VERSION -f GridWorker/src/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_htcmock_v3:$VERSION

  testInfraWorker:
    needs:
      - buildProjects
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@v2.7.x
        id: deploy-infra

      - name: Run GridServerLike
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Samples/GridServerLike/
         dotnet publish --self-contained -r linux-x64  -f net6.0 DataSynapseLike.sln

         mkdir -p ${{ steps.deploy-infra.outputs.host-path }}

         cp -v packages/ArmoniK.Samples.GridServer.Services-v1.0.0-700.zip ${{ steps.deploy-infra.outputs.host-path }}

         cd ArmoniK.Samples.GridServer.Client/
         dotnet bin/net5.0/linux-x64/ArmoniK.Samples.GridServer.Client.dll

      - name: Run SymphonyLike
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         mkdir -p ${{ steps.deploy-infra.outputs.host-path }}

         cd Samples/SymphonyLike/
         dotnet publish --self-contained -r linux-x64 -f net6.0 SymphonyLike.sln

         cp -v packages/ArmoniK.Samples.SymphonyPackage-v2.0.0.zip ${{ steps.deploy-infra.outputs.host-path }}

         cd ArmoniK.Samples.SymphonyClient/
         dotnet bin/Debug/net5.0/linux-x64/ArmoniK.Samples.SymphonyClient.dll

      - name: Run HtcMock SymphonyLike
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Samples/HtcMockSymphony/
         dotnet publish --self-contained -r linux-x64  -f net6.0 HtcMockSymphony.sln

         mkdir -p ${{ steps.deploy-infra.outputs.host-path }}

         cp -v packages/ArmoniK.Samples.HtcMockSymphonyPackage-v2.0.0.zip ${{ steps.deploy-infra.outputs.host-path }}

         cd ArmoniK.Samples.HtcMockSymphonyClient/
         dotnet bin/Debug/net5.0/linux-x64/ArmoniK.Samples.HtcMockSymphonyClient.dll

      - name: Copy logs
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/armoniklogs
          sudo cp -rL /var/log/pods/armonik_* /tmp/armoniklogs
          sudo chown $USER -R /tmp/armoniklogs
          find /tmp/armoniklogs -name "*.log"

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Logs Worker
          path: /tmp/armoniklogs/**/*.log
          retention-days: 5

  testInfraMockV3:
    needs:
      - versionning
      - buildMockV3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@v2.7.x
        name: Deploy ArmoniK Infra with Mock Image
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_htcmock_v3
          worker-tag: ${{ needs.versionning.outputs.version }}

      - name: Run Mock
        run: |
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort

          cd Samples/HtcMockV3/Client/src
          dotnet build "ArmoniK.Samples.HtcMock.Client.csproj" -c Release
          dotnet bin/Release/net5.0/ArmoniK.Samples.HtcMock.Client.dll

      - name: Copy logs
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/armoniklogs
          sudo cp -rL /var/log/pods/armonik_* /tmp/armoniklogs
          sudo chown $USER -R /tmp/armoniklogs
          find /tmp/armoniklogs -name "*.log"

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Logs Mock v3
          path: /tmp/armoniklogs/**/*.log
          retention-days: 5
