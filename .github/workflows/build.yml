name: DeployTest

on:
  push:

jobs:
  versionning:
    name: Versionning
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=master)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version : " >> $GITHUB_STEP_SUMMARY
        echo "$VERSION" >> $GITHUB_STEP_SUMMARY
        echo $VERSION

  formatCsharp:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

    - name: Install ReSharper
      run: |
        dotnet tool install -g JetBrains.ReSharper.GlobalTools --version 2022.2.2

    - name: Restore
      run: |
        dotnet restore AllSamples.sln

    - name: Reformat
      run: |
        jb cleanupcode AllSamples.sln

    - name: Check Diff
      run: |
        DIFF="$(git diff --name-only)"

        if [ -z "$DIFF" ]; then
          echo "OK: Format is clean"
        else
          echo "Error: Format was not clean"
          echo "List of files:"
          echo "$DIFF"
          git diff
          exit 1
        fi

  buildProjects:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

    - name: Build the package
      run: |
        dotnet build AllSamples.sln

  testInfraWorker:
    needs:
      - buildProjects
    strategy:
      matrix:
        scenario:
           - --nbTask 224  --nbInputBytes 4029815 --nbOutputBytes 226016  --workLoadTimeInMs 10

      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - uses: aneoconsulting/ArmoniK@v2.10.3
        id: deploy-infra
        with:
          ingress: 'None'

      - name: Run GridServerLike
        run: |
         cd tools/tests
         mkdir -p ${HOME}/data
         bash -x ./gridserver_like.sh

      - name: Run SymphonyLike
        run: |
         cd tools/tests
         echo "WorkingDirectory : [$(pwd -P)]"
         mkdir -p ${HOME}/data
         bash -x ./symphony_like.sh

      - name: Run UnifiedAPI
        run: |
         cd tools/tests
         mkdir -p ${HOME}/data
         bash -x ./unified_api.sh

      - name: Run HtcMock SymphonyLike
        run: |
         export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
         export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort

         cd Samples/HtcMockSymphony/
         dotnet publish --self-contained -r linux-x64  -f net6.0 HtcMockSymphony.sln

         mkdir -p ${{ steps.deploy-infra.outputs.host-path }}

         cp -v packages/ArmoniK.Samples.HtcMockSymphonyPackage-v2.0.0.zip ${{ steps.deploy-infra.outputs.host-path }}

         cd ArmoniK.Samples.HtcMockSymphonyClient/
         dotnet bin/Debug/net6.0/linux-x64/ArmoniK.Samples.HtcMockSymphonyClient.dll

      - name: Run StressTests
        run: |
         cd tools/tests
         mkdir -p ${HOME}/data
         bash -x ./stress-tests.sh -- stressTest ${{ matrix.scenario }}
      - name: Copy logs
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/armoniklogs
          sudo cp -rL /var/log/pods/armonik_* /tmp/armoniklogs
          sudo chown $USER -R /tmp/armoniklogs
          find /tmp/armoniklogs -name "*.log"

      - name: Store logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Logs Worker
          path: /tmp/armoniklogs/**/*.log
          retention-days: 5
